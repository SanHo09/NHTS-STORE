/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.nhom4.nhtsstore.ui.pointOfSale;

import com.nhom4.nhtsstore.common.ImageHelper;
import com.nhom4.nhtsstore.entities.Order;
import com.nhom4.nhtsstore.entities.OrderDetail;
import com.nhom4.nhtsstore.entities.Product;
import com.nhom4.nhtsstore.entities.rbac.User;
import com.nhom4.nhtsstore.enums.OrderStatus;
import com.nhom4.nhtsstore.services.OrderService;
import com.nhom4.nhtsstore.services.ProductService;
import com.nhom4.nhtsstore.ui.ApplicationState;
import com.nhom4.nhtsstore.ui.navigation.NavigationService;
import com.nhom4.nhtsstore.ui.navigation.RoutablePanel;
import com.nhom4.nhtsstore.ui.navigation.RouteParams;
import com.nhom4.nhtsstore.viewmodel.user.UserSessionVm;
import java.awt.Dimension;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import raven.modal.Toast;
import raven.modal.toast.option.ToastLocation;

/**
 *
 * @author Sang
 */
@Component
public class ProductDetailPanel extends javax.swing.JPanel implements RoutablePanel{
    private Product product;
    
    @Autowired
    private NavigationService navigationService;
    
    @Autowired
    private ProductService productService;
    
    @Autowired
    private OrderService orderService;
    
    @Autowired
    private ApplicationState applicationState;
     
    public ProductDetailPanel() {
        initComponents();
        // default value for spiner
        spnQuantity.setValue(1);
    }
    
    private int getQuantity() {
        Number number  = (Number)spnQuantity.getValue();
        int quantity = number.intValue();
        return quantity;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblManufactor = new javax.swing.JLabel();
        lblProductName = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        btnBuyNow = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();

        setToolTipText("");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setOpaque(false);

        lblManufactor.setBackground(new java.awt.Color(255, 255, 255));
        lblManufactor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblManufactor.setText("Manufactor");

        lblProductName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblProductName.setText("Product name");

        btnAddToCart.setBackground(new java.awt.Color(16, 20, 108));
        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAddToCart.setForeground(new java.awt.Color(255, 255, 255));
        btnAddToCart.setText("Add to card");
        btnAddToCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddToCartMouseClicked(evt);
            }
        });

        btnBuyNow.setBackground(new java.awt.Color(246, 127, 26));
        btnBuyNow.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBuyNow.setForeground(new java.awt.Color(255, 255, 255));
        btnBuyNow.setText("Buy Now");
        btnBuyNow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuyNowMouseClicked(evt);
            }
        });

        spnQuantity.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Quantity");

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(255, 0, 0));
        lblPrice.setText("Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblManufactor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblProductName, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuyNow, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spnQuantity)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblManufactor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuyNow, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(1010, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuyNowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuyNowMouseClicked
        upsertOrder();
        RouteParams params = new RouteParams();
        navigationService.navigateTo(CartPanel.class, params);
    }//GEN-LAST:event_btnBuyNowMouseClicked

    private void btnAddToCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddToCartMouseClicked
        upsertOrder();
        Toast.show(ProductDetailPanel.this, Toast.Type.SUCCESS,
                            "Successfully add to cart!",
                            ToastLocation.TOP_CENTER);
    }//GEN-LAST:event_btnAddToCartMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBuyNow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblManufactor;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JSpinner spnQuantity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onNavigate(RouteParams params) {
        var id = params.get("product", Product.class);
        this.product = productService.findById(id.getId());
        setValue();
    }
    
     private void setValue() {
        this.lblProductName.setText(this.product.getName());
        this.lblPrice.setText(this.product.getSalePrice() + "$");
        this.lblManufactor.setText(this.product.getManufacturer()+ "");
        this.lblImage.setPreferredSize(new Dimension(500, 500));
        if(!product.getImages().isEmpty()) {
            ImageHelper.SetLabelImage(lblImage, 500, 500, product.getImages().getFirst().getImageData());
        }
     }
     
     private void upsertOrder() {
        UserSessionVm currentUser = applicationState.getCurrentUser();
        var existingOrder = orderService.findByUserId(currentUser.getUserId());
        if (existingOrder == null) {
            // Create new Order
            Order newOrder = new Order();

            User user = new User();
            user.setUserId(currentUser.getUserId());
            newOrder.setUser(user);

            newOrder.setStatus(OrderStatus.IN_PROGRESS);
            newOrder.setActive(true);
            newOrder.setCreateDate(new Date());
            newOrder.setTotalAmount(getQuantity() * product.getSalePrice());

            // Check if order detail is already in order, just update quantity, unless, create new order detail

            OrderDetail orderDetail = new OrderDetail();
            orderDetail.setProduct(product);
            orderDetail.setQuantity(getQuantity());
            orderDetail.setOrder(newOrder); // back-reference

            newOrder.setOrderDetails(List.of(orderDetail)); // assign one detail

            orderService.save(newOrder);
        } else {
            // Check if product already in orderDetails
            Optional<OrderDetail> existingDetailOpt = existingOrder.getOrderDetails().stream()
                    .filter(od -> od.getProduct().getId().equals(product.getId()))
                    .findFirst();

            if (existingDetailOpt.isPresent()) {
                // Update quantity
                OrderDetail existingDetail = existingDetailOpt.get();
                existingDetail.setQuantity(existingDetail.getQuantity() + getQuantity());
            } else {
                // Create new detail
                OrderDetail orderDetail = new OrderDetail();
                orderDetail.setProduct(product);
                orderDetail.setQuantity(getQuantity());
                orderDetail.setOrder(existingOrder);
                existingOrder.getOrderDetails().add(orderDetail);
            }

            existingOrder.setTotalAmount(existingOrder.getTotalAmount() + getQuantity());

            orderService.save(existingOrder);
        }
     }
}
